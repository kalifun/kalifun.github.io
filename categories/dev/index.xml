<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dev on kalifun</title>
    <link>https://blog.kalifun.top/categories/dev/</link>
    <description>Recent content in dev on kalifun</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Apr 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.kalifun.top/categories/dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>自动化状态管理：优化项目开发中的状态流转</title>
      <link>https://blog.kalifun.top/post/mathmodel/fsm_demo/</link>
      <pubDate>Fri, 19 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.kalifun.top/post/mathmodel/fsm_demo/</guid>
      <description>有限状态机（英语：finite-state machine，缩写：FSM）又称有限状态自动机（英语：finite-state automaton，缩写：FSA），简称状态机，是表示有限个状态以及在这些状态之间的转移和动作等行为的数学计算模型。&#xA;状态机是由以下几个核心组成：&#xA;状态（state）：表示我们常见的a-&amp;gt;b-&amp;gt;c的状态序列。 事件（event）：触发从一个状态到另一个状态转换的条件。 动作（action）：在从一个状态转换到另一个状态时执行的具体操作。 转换（transition）：表示从一个状态到另一个状态的过程。 使用状态机的原因 随着项目的迭代，状态的数量可能会越来越多。以前可能还能通过使用if和switch语句来维护状态，但随着状态的增加，这种方法变得难以应付。状态的嵌套层级越来越深，并且许多产品还涉及到状态的回退，导致状态转换的判断变得复杂且难以维护。&#xA;使用状态机，我们可以根据预先定义好的状态自动进行状态流转。通过将状态和行为进行抽象和模块化，我们可以更好地管理和维护状态。&#xA;项目实践 下面是一个简单的示例，展示了一个真实项目中的状态流转：&#xA;状态 值 操作 标注待领取 1 领取: 标注中 标注中 2 提交: 内检待领取 内检待领取 3 领取: 内检中 内检中 4 提交: 验收待领取 打回: 标注待领取 验收待领取 5 领取: 验收中 验收中 6 提交: 已完成 打回: 内检待领取 已完成 7 在这个例子中，我们先构建了一个状态和操作的映射表（Map），然后根据事件来判断要执行的操作。如果存在对应的事件和操作，就进行状态的转换。这样就完成了整个流程。&#xA;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 package main import ( &amp;#34;fmt&amp;#34; ) func main() { Run(Default, Submit) Run(MarkPick, Submit) Run(Mark, Submit) Run(MarkPick, Receive) Run(Check, CallBack) } func Run(state State, event Event) { if v, ok := transitions[state][event]; ok { s := &amp;#34;&amp;#34; if v1, ok := stateName[state]; ok { s = v1 } s2 := &amp;#34;&amp;#34; if v2, ok := stateName[v]; ok { s2 = v2 } fmt.</description>
    </item>
    <item>
      <title>Workflow Wizard</title>
      <link>https://blog.kalifun.top/post/workflow/workflow_wizard/</link>
      <pubDate>Mon, 25 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.kalifun.top/post/workflow/workflow_wizard/</guid>
      <description>工欲善其事，必先利其器&#xA;这个是记录自己在工作流上感觉很方便，很好用的工具集。可能会随着时间的推移它会变得越来越有效率。&#xA;你也可以理解我正在直播带货，我会将这些好用的工具分享给各位，但不用担心他们都是免费的。&#xA;我会按照工具的分类来介绍，也会提供一些简单的玩法，更多可能需要你自己的探索。&#xA;输入法 输入法是日常工作中必不可少的工具,选择一个高效的输入方案可以极大提高输入速度。本人推荐使用双拼输入方案,相比全拼,它只需通过声母+韵母的组合即可输入所需的汉字,击键次数更少,输入效率更高。&#xA;双拼是汉语拼音输入法的一种编码方案。相对于全拼而言，使用双拼输入汉字时只需输入一个代表声母的字母，一个代表韵母的字母，就可以打出任意一个中文字了。&#xA;我举个简单的例子：&#xA;全拼 双 s h u a n g 我们需要输入6次 双拼 双 sh uang我们只需要输入2次 那会好奇，键盘上没有这种组合键啊？其实和五笔是一个逻辑，就是它有自己的一套标准，需要我们记忆键位，才能完美的输出自己想要的字。市面有很多双拼方案，他们的键位映射是不一样的，所以可以先去了解不同的方案的键位，我们这边推荐小鹤双拼。&#xA;小鹤双拼 当我们输入双的时候，我们只需要u + l，就可以了，这个需要自己形成肌肉记忆。推荐看看官网，会有一些记忆法可以帮助到你。&#xA;如果对输入法隐私有所顾虑,也可以考虑使用开源的Rime输入法引擎,它支持高度定制,并且无需连接在线服务器。&#xA;启动器 Raycast Raycast is a blazingly fast, totally extendable launcher. It lets you complete tasks, calculate, share common links, and much more.&#xA;具体使用这边就不介绍了，它是一个功能丰富的启动器，我们可以自定义启动器的快捷键，我这边的是option + space. 然后你可以同通过启动器来启动软件，不再需要翻软件列表了。当然它有很多的功能，日历，剪切板历史，窗口管理等&amp;hellip;&#xA;Hotkey 你可以理解它其实就是全局的快捷键，我们可以将常用的application设置hotkey。这样我们可以快速的打开它。换着快速切换到它活跃的窗口。&#xA;Window Management 我们会不会经常需要左边打开浏览器，右边打开编辑器。你还在那不断的拖拽窗口来调整他们的大小吗？&#xA;很惊喜，Raycast自带窗口管理器，我们可以通过它的command或者自己设置hotkey来进行窗口管理。&#xA;它拥有丰富的插件库，如果你感兴趣可以去翻翻，还有很多好的功能。&#xA;终端 Wezterm WezTerm is a powerful cross-platform terminal emulator and multiplexer written by @wez and implemented in Rust</description>
    </item>
  </channel>
</rss>
